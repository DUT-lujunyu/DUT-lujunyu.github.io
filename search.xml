<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python爬取知乎回答并进行舆情分析：爬取数据部分</title>
    <url>/2021/08/24/python_zhihu/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近期导师让我从社交媒体平台（包括微博、知乎、贴吧等）爬取用户评论数据，并进行相应的舆情分析。之前爬取过贴吧和微博的数据，这次第一回接触知乎的爬虫，发现还是有区别的。写篇博客记录一下~</p>
<h1 id="Ajax原理介绍"><a href="#Ajax原理介绍" class="headerlink" title="Ajax原理介绍"></a>Ajax原理介绍</h1><p>利用google浏览器打开知乎中任意问题（本文中示例问题为 <a href="https://www.zhihu.com/question/482094335/answer/2080599564"><strong>如何看待天府少年团改名熊猫少儿艺术团，公司称「不做饭圈文化，没有资本运作，爱舞台的孩子做有意义的事」？</strong></a>），发现知乎采取动态加载技术，内容块只有在浏览器下滚时才会刷新。与微博和贴吧不同，知乎的html文件中没有“下一页”的相关节点，无法直接解析。因此需要从原始的Request报文着手，获取文本数据。</p>
<p><strong>Ajax</strong>(Asynchronous Java and XML的缩写)是一种异步请求数据的web开发技术，能够改善用户的体验，提高页面性能。</p>
<p>Ajax的工作原理相当于在用户和服务器之间加了—个中间层(<strong>XHR</strong>)，使用户操作与服务器响应异步化。并不是所有的用户请求都提交给服务器,像—些数据验证和数据处理等都交给XHR自己来做, 只有确定需要从服务器读取新数据时再由XHR代为向服务器提交请求，示意图如下：<br><img src="https://img-blog.csdnimg.cn/3bca656242a84d8298a4ff0bd00e5545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDgwNjA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">在本次爬虫中，利用Ajax技术获取服务器发往浏览器的原始报文。</p>
<h1 id="Request-URL分析"><a href="#Request-URL分析" class="headerlink" title="Request URL分析"></a>Request URL分析</h1><p>F12进入开发者模式，进入<strong>Network</strong>界面，选择<strong>Fetch/XML</strong>，可以看到各个请求的相关信息。<br><img src="https://img-blog.csdnimg.cn/47792da2a6624b3fbdd1e40154b74437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDgwNjA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">选择其中answers?开头的请求，观察<strong>Request URL</strong>。注意到有两个字段，<strong>offset</strong> 和 <strong>limit</strong>，其中 <strong>offset</strong> 指的是报文中第一个回答对应的索引号（从0开始），<strong>limit</strong> 指的是一条报文中能够包含的最多的回答数。用户可以在URL定义这两个值。</p>
<p><strong>在设定时应当注意</strong>：<br>offset 不能超过回答总数 - 1；<br>limit 不能超过上限。<br><img src="https://img-blog.csdnimg.cn/f1643c2ade5e471d8c2ef3c485af50ea.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDgwNjA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">为了便于观察json数据报格式，将 limit 设定为1，复制以下URL即可查看json报文信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://www.zhihu.com/api/v4/questions/<span class="number">482094335</span>/answers?include=data%5B*%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cattachment%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Cis_labeled%2Cpaid_info%2Cpaid_info_content%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cis_recognized%3Bdata%5B*%5D.mark_infos%5B*%5D.url%3Bdata%5B*%5D.author.follower_count%2Cvip_info%2Cbadge%5B*%5D.topics%3Bdata%5B*%5D.settings.table_of_content.enabled&amp;offset=<span class="number">0</span>&amp;limit=<span class="number">1</span>&amp;sort_by=default&amp;platform=desktop</span><br></pre></td></tr></table></figure>

<h1 id="json报文结构分析"><a href="#json报文结构分析" class="headerlink" title="json报文结构分析"></a>json报文结构分析</h1><p>下面对json报文进行结构分析，报文主要分为两部分：<strong>“data”</strong> 和 <strong>“page”</strong>。<br>data：包含 html 文本数据，本次爬虫重点关注以下字段：<br>|字段 | 含义|<br>——– | —–<br>author -&gt; name | 用户名<br>author -&gt; url_token | 用户token<br>content | 回答<br>updated_time |回答时间<br>voteup_count |赞同数量<br>comment_count |评论数量</p>
<p><strong>说明：</strong><br><strong>用户token是用户的唯一识别标志</strong>，“<a href="https://www.zhihu.com/people/%E2%80%9D">https://www.zhihu.com/people/”</a> + url_token 为该用户知乎主页；<br><strong>报文中的时间都是时间戳</strong>，需要转化为 “年-月-日 时-分-秒” 的形式。</p>
<p>page：记录是否已经是该问题下的最后一个回答。如果字段 <strong>is_end = true</strong>，则可以结束请求。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>引包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> codecs <span class="comment">#解决乱码</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br></pre></td></tr></table></figure>

<p>请求头和URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Request URL</span></span><br><span class="line">base_url = <span class="string">&quot;https://www.zhihu.com/api/v4/questions/482094335/answers?&quot;</span></span><br><span class="line">include = <span class="string">&quot;data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cattachment%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Cis_labeled%2Cpaid_info%2Cpaid_info_content%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cis_recognized%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cvip_info%2Cbadge%5B%2A%5D.topics%3Bdata%5B%2A%5D.settings.table_of_content.enabled&quot;</span></span><br></pre></td></tr></table></figure>
<p>获得页面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">offset</span>):</span></span><br><span class="line">    page_url = <span class="string">&#x27;include=&#x27;</span> + include + <span class="string">&#x27;&amp;limit=5&amp;&#x27;</span> + <span class="string">&#x27;offset=&#x27;</span> + <span class="built_in">str</span>(offset) + <span class="string">&#x27;&amp;platform=desktop&amp;sort_by=default&#x27;</span></span><br><span class="line">    url = base_url + page_url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure>
<p>时间转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间戳转化为年-月-日 时-分-秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TimeStampToTime</span>(<span class="params">timestamp</span>):</span></span><br><span class="line">    timeStruct = time.localtime(timestamp)</span><br><span class="line">    <span class="keyword">return</span> time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, timeStruct)</span><br></pre></td></tr></table></figure>
<p>解析页面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">json</span>):</span></span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        items = json.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:  <span class="comment"># items: 一条报文中的所有回答 </span></span><br><span class="line">            zhihu = &#123;&#125;</span><br><span class="line">            zhihu[<span class="string">&#x27;作者&#x27;</span>] = item.get(<span class="string">&#x27;author&#x27;</span>).get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">            zhihu[<span class="string">&#x27;user_token&#x27;</span>] = item.get(<span class="string">&#x27;author&#x27;</span>).get(<span class="string">&#x27;url_token&#x27;</span>)</span><br><span class="line">            zhihu[<span class="string">&#x27;回答&#x27;</span>] = pq(item.get(<span class="string">&#x27;content&#x27;</span>)).text()</span><br><span class="line">            zhihu[<span class="string">&#x27;创建时间&#x27;</span>] = TimeStampToTime(item.get(<span class="string">&#x27;updated_time&#x27;</span>))</span><br><span class="line">            zhihu[<span class="string">&#x27;赞同数&#x27;</span>] = item.get(<span class="string">&#x27;voteup_count&#x27;</span>)</span><br><span class="line">            zhihu[<span class="string">&#x27;评论数&#x27;</span>] = item.get(<span class="string">&#x27;comment_count&#x27;</span>)</span><br><span class="line">            <span class="keyword">yield</span> zhihu</span><br></pre></td></tr></table></figure>
<p>主函数执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    i = <span class="number">0</span>  </span><br><span class="line">    f = codecs.<span class="built_in">open</span>(<span class="string">&#x27;test.csv&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>, <span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br><span class="line">    f_txt = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>, encoding=<span class="string">&#x27;utf_8&#x27;</span>)</span><br><span class="line">    fieldnames = [<span class="string">&#x27;作者&#x27;</span>, <span class="string">&#x27;user_token&#x27;</span>, <span class="string">&#x27;回答&#x27;</span>, <span class="string">&#x27;创建时间&#x27;</span>, <span class="string">&#x27;赞同数&#x27;</span>, <span class="string">&#x27;评论数&#x27;</span>]</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        js = get_page(i*<span class="number">5</span>)  <span class="comment"># 根据报文首个回答对应的索引值获取页面</span></span><br><span class="line">        results = parse_page(js)</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">            writer.writerow(res)</span><br><span class="line">            <span class="keyword">for</span> detail <span class="keyword">in</span> res.values():</span><br><span class="line">                f_txt.write(<span class="built_in">str</span>(detail) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            f_txt.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;*&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 分隔符</span></span><br><span class="line">        <span class="keyword">if</span> js.get(<span class="string">&#x27;paging&#x27;</span>).get(<span class="string">&#x27;is_end&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;finish!&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    f.close()</span><br><span class="line">    f_txt.close()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/m0_37969932/article/details/116330217?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162969083416780261967528%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162969083416780261967528&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116330217.ecpm_v1_rank_v29&utm_term=%E7%9F%A5%E4%B9%8E%E7%88%AC%E8%99%AB&spm=1018.2226.3001.4187">2021年知乎爬虫</a></p>
<p><a href="https://blog.csdn.net/weixin_45019310/article/details/89923644?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162977091516780255228188%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162977091516780255228188&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-89923644.pc_search_download_positive&utm_term=%E7%9F%A5%E4%B9%8Eajax&spm=1018.2226.3001.4187">python爬虫——关于ajax加载之爬取2019年知乎问题和描述</a></p>
<p><a href="https://www.sohu.com/a/238246281_100109711">Ajax原理</a></p>
]]></content>
  </entry>
</search>
